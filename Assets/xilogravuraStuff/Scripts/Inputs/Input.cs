//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/xilogravuraStuff/Scripts/Inputs/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""ControlesDebug"",
            ""id"": ""6f0ff355-5bf5-4def-a7b4-3802fd0bd52d"",
            ""actions"": [
                {
                    ""name"": ""DecreaseBrush"",
                    ""type"": ""Button"",
                    ""id"": ""f348829e-af4c-4b81-882c-675d5362cc33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncreaseBrush"",
                    ""type"": ""Button"",
                    ""id"": ""2dbc6787-9231-47be-a45f-d4a43bd23d9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""66a8508e-b6e9-4f10-ade2-91e2e7f6367d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseBrush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b94df013-8658-4b67-ab86-21ec5619d5af"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseBrush"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlesDebug
        m_ControlesDebug = asset.FindActionMap("ControlesDebug", throwIfNotFound: true);
        m_ControlesDebug_DecreaseBrush = m_ControlesDebug.FindAction("DecreaseBrush", throwIfNotFound: true);
        m_ControlesDebug_IncreaseBrush = m_ControlesDebug.FindAction("IncreaseBrush", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlesDebug
    private readonly InputActionMap m_ControlesDebug;
    private List<IControlesDebugActions> m_ControlesDebugActionsCallbackInterfaces = new List<IControlesDebugActions>();
    private readonly InputAction m_ControlesDebug_DecreaseBrush;
    private readonly InputAction m_ControlesDebug_IncreaseBrush;
    public struct ControlesDebugActions
    {
        private @Input m_Wrapper;
        public ControlesDebugActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @DecreaseBrush => m_Wrapper.m_ControlesDebug_DecreaseBrush;
        public InputAction @IncreaseBrush => m_Wrapper.m_ControlesDebug_IncreaseBrush;
        public InputActionMap Get() { return m_Wrapper.m_ControlesDebug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesDebugActions set) { return set.Get(); }
        public void AddCallbacks(IControlesDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesDebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesDebugActionsCallbackInterfaces.Add(instance);
            @DecreaseBrush.started += instance.OnDecreaseBrush;
            @DecreaseBrush.performed += instance.OnDecreaseBrush;
            @DecreaseBrush.canceled += instance.OnDecreaseBrush;
            @IncreaseBrush.started += instance.OnIncreaseBrush;
            @IncreaseBrush.performed += instance.OnIncreaseBrush;
            @IncreaseBrush.canceled += instance.OnIncreaseBrush;
        }

        private void UnregisterCallbacks(IControlesDebugActions instance)
        {
            @DecreaseBrush.started -= instance.OnDecreaseBrush;
            @DecreaseBrush.performed -= instance.OnDecreaseBrush;
            @DecreaseBrush.canceled -= instance.OnDecreaseBrush;
            @IncreaseBrush.started -= instance.OnIncreaseBrush;
            @IncreaseBrush.performed -= instance.OnIncreaseBrush;
            @IncreaseBrush.canceled -= instance.OnIncreaseBrush;
        }

        public void RemoveCallbacks(IControlesDebugActions instance)
        {
            if (m_Wrapper.m_ControlesDebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesDebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesDebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesDebugActions @ControlesDebug => new ControlesDebugActions(this);
    public interface IControlesDebugActions
    {
        void OnDecreaseBrush(InputAction.CallbackContext context);
        void OnIncreaseBrush(InputAction.CallbackContext context);
    }
}
